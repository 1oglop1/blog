var tipuesearch = {"pages":[{"title":"About Me","text":"My name is Jan Gazda. I'm a curious person with too many interests. Apart from riding BMX, listening to many kinds of music I fell in love with Python programming language. Python During my bachelor studies at VŠB TU Ostrava we were taught in many languages, C, C++, Java, but none of these classes was a really satisfying and good introduction to programming. Until I went through the course teaching Python which helped me to gain confidence and control writing a code. I quickly found out that Python is not only great programming language but also a community is welcoming for the newcomers. And we are very lucky to have one of the best python communities right in Czech Republic. So if you are interested, jump on one PyVo . I moved to Amsterdam (the Netherlands) and found out that community is not so active and I'm trying to grow PyVo culture here. We started a meetup group called PyAmsterdam ( at meetup.com ). [PyAmsterdam logo]","tags":"pages","url":"https://1oglop1.github.io/blog/pages/about.html","loc":"https://1oglop1.github.io/blog/pages/about.html"},{"title":"Hello world long title, even longer title","text":"So this is the magical content. asdasdasdasd","tags":"other","url":"https://1oglop1.github.io/blog/2019/20/03/hello-world-long-title-even-longer-title.html","loc":"https://1oglop1.github.io/blog/2019/20/03/hello-world-long-title-even-longer-title.html"},{"title":"No summ","text":"So how many words do I have to fit in article summary before it gets screwed up? So this is the magical content. asdasdasdasd 1 So how many words do I have to fit in article summary before it gets screwed up? So this is the magical content. asdasdasdasd 2 So how many words do I have to fit in article summary before it gets screwed up? So this is the magical content. asdasdasdasd 3 So how many words do I have to fit in article summary before it gets screwed up? So this is the magical content. asdasdasdasd 4 So how many words do I have to fit in article summary before it gets screwed up? So this is the magical content. asdasdasdasd 5 So how many words do I have to fit in article summary before it gets screwed up? So this is the magical content. asdasdasdasd 6 Second paragrpah?","tags":"other","url":"https://1oglop1.github.io/blog/2019/20/03/no-summ.html","loc":"https://1oglop1.github.io/blog/2019/20/03/no-summ.html"},{"title":"Python short","text":"So this is the magical content. asdasdasdasd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import the , heck @decorator ( param = 1 ) def f ( x ): \"\"\" Syntax Highlighting Demo @param x Parameter Semantic highlighting: Generated spectrum to pick colors for local variables and parameters: Color#1 SC1.1 SC1.2 SC1.3 SC1.4 Color#2 SC2.1 SC2.2 SC2.3 SC2.4 Color#3 Color#3 SC3.1 SC3.2 SC3.3 SC3.4 Color#4 SC4.1 SC4.2 SC4.3 SC4.4 Color#5 \"\"\" s = ( \"Test\" , 2 + 3 , { 'a' : 'b' }, f '{x!s:{\"foo\"}}' ) # Comment f ( s [ 0 ] . lower ()) class Foo : tags = List [ str ] def __init__ ( self : Foo ): byte_string : str = 'newline: \\n also newline: \\x0a ' text_string = u \"Cyrillic Я is \\u042f . Oops: \\u042g\" self . makeSense ( whatever = 1 ) def makeSense ( self , whatever ): self . sense = whatever x = len ( 'abc' ) print ( f . __doc__ ) Some other code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import the , heck @decorator ( param = 1 ) def f ( x ): \"\"\" Syntax Highlighting Demo @param x Parameter Semantic highlighting: Generated spectrum to pick colors for local variables and parameters: Color#1 SC1.1 SC1.2 SC1.3 SC1.4 Color#2 SC2.1 SC2.2 SC2.3 SC2.4 Color#3 Color#3 SC3.1 SC3.2 SC3.3 SC3.4 Color#4 SC4.1 SC4.2 SC4.3 SC4.4 Color#5 \"\"\" s = ( \"Test\" , 2 + 3 , { 'a' : 'b' }, f '{x!s:{\"foo\"}}' ) # Comment f ( s [ 0 ] . lower ()) class Foo : tags = List [ str ] def __init__ ( self : Foo ): byte_string : str = 'newline: \\n also newline: \\x0a ' text_string = u \"Cyrillic Я is \\u042f . Oops: \\u042g\" self . makeSense ( whatever = 1 ) def makeSense ( self , whatever ): self . sense = whatever x = len ( 'abc' ) print ( f . __doc__ )","tags":"python","url":"https://1oglop1.github.io/blog/2019/20/03/python-short.html","loc":"https://1oglop1.github.io/blog/2019/20/03/python-short.html"},{"title":"Python, the language, the ecosystem and the personalities","text":"So this is the magical content. asdasdasdasd","tags":"python","url":"https://1oglop1.github.io/blog/2019/20/03/python-the-language-the-ecosystem-and-the-personalities.html","loc":"https://1oglop1.github.io/blog/2019/20/03/python-the-language-the-ecosystem-and-the-personalities.html"},{"title":"Hello world","text":"So this is the magical content. asdasdasdasd This is the caption of the figure. The legend consists of all elements after the caption. In this case, the legend consists of this paragraph. text below This is the caption of the figure. source: http://localhost:63342/pelican/output/2018/20/03/hello-world.html The legend consists of all elements after the caption. In this case, the legend consists of this paragraph. Source: http://localhost:63342/pelican/output/2018/20/03/hello-world.html text below","tags":"other","url":"https://1oglop1.github.io/blog/2018/20/03/hello-world.html","loc":"https://1oglop1.github.io/blog/2018/20/03/hello-world.html"},{"title":"Wuump","text":"This is very short summary of what's going on in the article right below. So this is the magical content. asdasdasdasd w w w w w w w w w w w w w w w w w w w w w w w w - w w w w w w w w w w w w w w w w w w 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import sys import pygments from pygments import highlight from pygments.formatters import HtmlFormatter from pygments.lexers import PythonLexer from pygments.styles import get_all_styles def function ( x ): \"\"\"asdf\"\"\" pass style_block = < style > \\ n % s \\ n </ style > with open ( sys . argv [ 0 ]) as f : # skip the heading comments code = f . read () . split ( \\ n \\ n , 1 )[ 1 ] print ( Pygments version : % s % pygments . __version__ ) print () indent = lambda s : + s . replace ( \\ n , \\ n ) for style in sorted ( get_all_styles ()): class_tag = pygments -% s % style print ( % s % style ) print ( % s % ( = * len ( style ))) print () formatter = HtmlFormatter ( linenos = True , cssclass = class_tag , style = style ) print ( .. raw :: html \\ n ) print ( indent ( style_block % formatter . get_style_defs ( . + class_tag ))) print ( indent ( highlight ( code , PythonLexer (), formatter ))) print () Some other code import the , heck","tags":"aha","url":"https://1oglop1.github.io/blog/2017/20/03/wumwum.html","loc":"https://1oglop1.github.io/blog/2017/20/03/wumwum.html"}]};